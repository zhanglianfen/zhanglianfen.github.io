const e=JSON.parse('{"key":"v-9c4fb6a0","path":"/zh/language/Java/multithreading/current-container/block-wait.html","title":"阻塞等待","lang":"zh-CN","frontmatter":{"category":["Java"],"tag":["多线程"],"description":"阻塞等待 提示 如何实现支持阻塞读写的线程安全队列（阻塞并发队列）？ 在讲解条件变量和信号量时，我们留给大家思考如何使用条件变量或信号量来实现阻塞并发队列。本节我们就结合JUC源码来看下工业级的阻塞并发队列，到底是怎么实现的，都有哪些值得我们学习的地方。 一、阻塞并发队列 阻塞并发队列具有两个特点，第一个是线程安全，也就是名称中“并发”的含义，第二个是支持读写阻塞，也就是名称中“阻塞”的含义。读阻塞指的是，当从队列中读取数据时，如果队列已空，那么读操作阻塞，直到队列有新数据写入，读操作才成功返回。写阻塞指的是，当往队列中写入数据时，如果队列已满，那么写操作阻塞，直到队列重新腾出空位置，写入操作才成功返回。阻塞并发队列一般用于实现生产者-消费者模型。","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/multithreading/current-container/block-wait.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"阻塞等待"}],["meta",{"property":"og:description","content":"阻塞等待 提示 如何实现支持阻塞读写的线程安全队列（阻塞并发队列）？ 在讲解条件变量和信号量时，我们留给大家思考如何使用条件变量或信号量来实现阻塞并发队列。本节我们就结合JUC源码来看下工业级的阻塞并发队列，到底是怎么实现的，都有哪些值得我们学习的地方。 一、阻塞并发队列 阻塞并发队列具有两个特点，第一个是线程安全，也就是名称中“并发”的含义，第二个是支持读写阻塞，也就是名称中“阻塞”的含义。读阻塞指的是，当从队列中读取数据时，如果队列已空，那么读操作阻塞，直到队列有新数据写入，读操作才成功返回。写阻塞指的是，当往队列中写入数据时，如果队列已满，那么写操作阻塞，直到队列重新腾出空位置，写入操作才成功返回。阻塞并发队列一般用于实现生产者-消费者模型。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"多线程"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/multithreading/current-container/block-wait.html"}]]},"headers":[{"level":2,"title":"一、阻塞并发队列","slug":"一、阻塞并发队列","link":"#一、阻塞并发队列","children":[]},{"level":2,"title":"二、BlockingQueue","slug":"二、blockingqueue","link":"#二、blockingqueue","children":[]},{"level":2,"title":"三、DelayQueue","slug":"三、delayqueue","link":"#三、delayqueue","children":[]},{"level":2,"title":"四、SynchronousQueue","slug":"四、synchronousqueue","link":"#四、synchronousqueue","children":[]},{"level":2,"title":"五、LinkedTransferQueue","slug":"五、linkedtransferqueue","link":"#五、linkedtransferqueue","children":[]},{"level":2,"title":"六、思考题","slug":"六、思考题","link":"#六、思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":11.61,"words":3484},"filePathRelative":"zh/language/Java/multithreading/current-container/block-wait.md","localizedDate":"2022年12月9日","excerpt":"<h1> 阻塞等待</h1>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p><strong>如何实现支持阻塞读写的线程安全队列（阻塞并发队列）？</strong></p>\\n<p>在讲解条件变量和信号量时，我们留给大家思考如何使用条件变量或信号量来实现阻塞并发队列。本节我们就结合JUC源码来看下工业级的阻塞并发队列，到底是怎么实现的，都有哪些值得我们学习的地方。</p>\\n</div>\\n<h2> <strong>一、阻塞并发队列</strong></h2>\\n<p>阻塞并发队列具有两个特点，第一个是线程安全，也就是名称中“并发”的含义，第二个是支持读写阻塞，也就是名称中“阻塞”的含义。读阻塞指的是，当从队列中读取数据时，如果队列已空，那么读操作阻塞，直到队列有新数据写入，读操作才成功返回。写阻塞指的是，当往队列中写入数据时，如果队列已满，那么写操作阻塞，直到队列重新腾出空位置，写入操作才成功返回。阻塞并发队列一般用于实现生产者-消费者模型。</p>","autoDesc":true}');export{e as data};
