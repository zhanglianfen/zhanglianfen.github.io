const e=JSON.parse('{"key":"v-e6c42a08","path":"/zh/language/Java/basics/container/16.Iterator.html","title":"迭代器","lang":"zh-CN","frontmatter":{"category":["Java容器"],"description":"迭代器 迭代器：绝大多数Java容器都有的modCount属性是做什么用的？ 讲到容器，我们不得不讲一下迭代器。迭代器是遍历容器的常用方法。Java中的迭代器是迭代模式的经典实现。虽然大部分情况下迭代器的使用都比较简单，但有些情况下也会比较复杂，比如在创建迭代器之后，增删容器中的元素，再使用迭代器遍历容器，会导致未决行为（结果不确定）。为了解决这一问题，迭代器又设计了一套复杂的保护机制，而这套机制在面试中又经常被考察。所以，本节我们就来详细讲一讲迭代器。 一、容器的几种遍历方法","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/basics/container/16.Iterator.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"迭代器"}],["meta",{"property":"og:description","content":"迭代器 迭代器：绝大多数Java容器都有的modCount属性是做什么用的？ 讲到容器，我们不得不讲一下迭代器。迭代器是遍历容器的常用方法。Java中的迭代器是迭代模式的经典实现。虽然大部分情况下迭代器的使用都比较简单，但有些情况下也会比较复杂，比如在创建迭代器之后，增删容器中的元素，再使用迭代器遍历容器，会导致未决行为（结果不确定）。为了解决这一问题，迭代器又设计了一套复杂的保护机制，而这套机制在面试中又经常被考察。所以，本节我们就来详细讲一讲迭代器。 一、容器的几种遍历方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/basics/container/16.Iterator.html"}]]},"headers":[{"level":2,"title":"一、容器的几种遍历方法","slug":"一、容器的几种遍历方法","link":"#一、容器的几种遍历方法","children":[]},{"level":2,"title":"二、迭代器存在的意义","slug":"二、迭代器存在的意义","link":"#二、迭代器存在的意义","children":[]},{"level":2,"title":"三、迭代器的基本实现原理","slug":"三、迭代器的基本实现原理","link":"#三、迭代器的基本实现原理","children":[]},{"level":2,"title":"四、迭代器遍历存在的问题","slug":"四、迭代器遍历存在的问题","link":"#四、迭代器遍历存在的问题","children":[]},{"level":2,"title":"五、迭代器问题的解决思路","slug":"五、迭代器问题的解决思路","link":"#五、迭代器问题的解决思路","children":[]},{"level":2,"title":"六、利用迭代器安全删除元素","slug":"六、利用迭代器安全删除元素","link":"#六、利用迭代器安全删除元素","children":[]},{"level":2,"title":"七、课后思考题","slug":"七、课后思考题","link":"#七、课后思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":13.83,"words":4149},"filePathRelative":"zh/language/Java/basics/container/16.Iterator.md","localizedDate":"2022年12月9日","excerpt":"<h1> 迭代器</h1>\\n<blockquote>\\n<p><strong>迭代器：绝大多数Java容器都有的modCount属性是做什么用的？</strong></p>\\n</blockquote>\\n<p>讲到容器，我们不得不讲一下迭代器。迭代器是遍历容器的常用方法。Java中的迭代器是迭代模式的经典实现。虽然大部分情况下迭代器的使用都比较简单，但有些情况下也会比较复杂，比如在创建迭代器之后，增删容器中的元素，再使用迭代器遍历容器，会导致未决行为（结果不确定）。为了解决这一问题，迭代器又设计了一套复杂的保护机制，而这套机制在面试中又经常被考察。所以，本节我们就来详细讲一讲迭代器。</p>\\n<h2> 一、容器的几种遍历方法</h2>","autoDesc":true}');export{e as data};
