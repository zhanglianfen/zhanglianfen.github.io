const t=JSON.parse('{"key":"v-8dd4cb7c","path":"/zh/language/Java/multithreading/sync-tool/Latch-Barrier.html","title":"锁存器和栅栏","lang":"zh-CN","frontmatter":{"category":["Java"],"tag":["多线程","同步工具类"],"description":"锁存器和栅栏 提示 如何编程测试接口在不同并发下的性能？ 在平时开发中，有时候，我们需要自己编写代码，测试某个接口在不同并发下的性能，比如测试在N个（N可以是100、200等任意数）接口请求并发执行时接口的响应时间、QPS等。为了模拟接口的并发请求，我们需要用到多线程。除此之外，线程之间的协调执行，还需要用到本节要讲的CountDownLatch和CyclicBarrier。接下来，我们就结合这个需求的开发，详细讲解一下CountDownLatch和CyclicBarrier的用法以及实现原理。","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/multithreading/sync-tool/Latch-Barrier.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"锁存器和栅栏"}],["meta",{"property":"og:description","content":"锁存器和栅栏 提示 如何编程测试接口在不同并发下的性能？ 在平时开发中，有时候，我们需要自己编写代码，测试某个接口在不同并发下的性能，比如测试在N个（N可以是100、200等任意数）接口请求并发执行时接口的响应时间、QPS等。为了模拟接口的并发请求，我们需要用到多线程。除此之外，线程之间的协调执行，还需要用到本节要讲的CountDownLatch和CyclicBarrier。接下来，我们就结合这个需求的开发，详细讲解一下CountDownLatch和CyclicBarrier的用法以及实现原理。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"多线程"}],["meta",{"property":"article:tag","content":"同步工具类"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/multithreading/sync-tool/Latch-Barrier.html"}]]},"headers":[{"level":2,"title":"一、CountDownLatch的用法","slug":"一、countdownlatch的用法","link":"#一、countdownlatch的用法","children":[]},{"level":2,"title":"二、CountDownLatch的实现原理","slug":"二、countdownlatch的实现原理","link":"#二、countdownlatch的实现原理","children":[]},{"level":2,"title":"三、CyclicBarrier的用法","slug":"三、cyclicbarrier的用法","link":"#三、cyclicbarrier的用法","children":[]},{"level":2,"title":"四、CyclicBarrier的实现原理","slug":"四、cyclicbarrier的实现原理","link":"#四、cyclicbarrier的实现原理","children":[]},{"level":2,"title":"五、在接口性能测试中的应用","slug":"五、在接口性能测试中的应用","link":"#五、在接口性能测试中的应用","children":[]},{"level":2,"title":"六、思考题","slug":"六、思考题","link":"#六、思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":8.93,"words":2679},"filePathRelative":"zh/language/Java/multithreading/sync-tool/Latch-Barrier.md","localizedDate":"2022年12月9日","excerpt":"<h1> <strong>锁存器和栅栏</strong></h1>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>如何编程测试接口在不同并发下的性能？</p>\\n<p>在平时开发中，有时候，我们需要自己编写代码，测试某个接口在不同并发下的性能，比如测试在N个（N可以是100、200等任意数）接口请求并发执行时接口的响应时间、QPS等。为了模拟接口的并发请求，我们需要用到多线程。除此之外，线程之间的协调执行，还需要用到本节要讲的CountDownLatch和CyclicBarrier。接下来，我们就结合这个需求的开发，详细讲解一下CountDownLatch和CyclicBarrier的用法以及实现原理。</p>\\n</div>","autoDesc":true}');export{t as data};
