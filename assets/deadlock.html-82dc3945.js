const e=JSON.parse('{"key":"v-31409790","path":"/zh/language/Java/multithreading/lock/deadlock.html","title":"死锁、活锁、饥饿","lang":"zh-CN","frontmatter":{"category":["Java"],"description":"死锁、活锁、饥饿 提示 死锁、活锁、饥饿：如何设计策略实现Java多线程死锁检测和撤销？ 在前面的几节中，我们讲解了各种锁，比如，synchronized或Lock悲观锁，自旋+CAS乐观锁。锁的使用可以解决多线程安全问题，但同时也会带来性能问题（加锁、解锁耗时）。实际上，除了性能问题之外，锁的使用还会导致其他问题，比如死锁、活锁、饥饿。本节，我们就来讲讲，锁的使用导致的死锁、活锁、饥饿问题。","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/multithreading/lock/deadlock.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"死锁、活锁、饥饿"}],["meta",{"property":"og:description","content":"死锁、活锁、饥饿 提示 死锁、活锁、饥饿：如何设计策略实现Java多线程死锁检测和撤销？ 在前面的几节中，我们讲解了各种锁，比如，synchronized或Lock悲观锁，自旋+CAS乐观锁。锁的使用可以解决多线程安全问题，但同时也会带来性能问题（加锁、解锁耗时）。实际上，除了性能问题之外，锁的使用还会导致其他问题，比如死锁、活锁、饥饿。本节，我们就来讲讲，锁的使用导致的死锁、活锁、饥饿问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/multithreading/lock/deadlock.html"}]]},"headers":[{"level":2,"title":"一、死锁","slug":"一、死锁","link":"#一、死锁","children":[]},{"level":2,"title":"二、活锁","slug":"二、活锁","link":"#二、活锁","children":[]},{"level":2,"title":"三、饥饿","slug":"三、饥饿","link":"#三、饥饿","children":[]},{"level":2,"title":"四、思考题","slug":"四、思考题","link":"#四、思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":14.09,"words":4226},"filePathRelative":"zh/language/Java/multithreading/lock/deadlock.md","localizedDate":"2022年12月9日","excerpt":"<h1> 死锁、活锁、饥饿</h1>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p><strong>死锁、活锁、饥饿：如何设计策略实现Java多线程死锁检测和撤销？</strong></p>\\n<p>在前面的几节中，我们讲解了各种锁，比如，synchronized或Lock悲观锁，自旋+CAS乐观锁。锁的使用可以解决多线程安全问题，但同时也会带来性能问题（加锁、解锁耗时）。实际上，除了性能问题之外，锁的使用还会导致其他问题，比如死锁、活锁、饥饿。本节，我们就来讲讲，锁的使用导致的死锁、活锁、饥饿问题。</p>\\n</div>","autoDesc":true}');export{e as data};
