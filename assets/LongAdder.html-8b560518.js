const e=JSON.parse('{"key":"v-52938c40","path":"/zh/language/Java/multithreading/lockless/LongAdder.html","title":"累加器","lang":"zh-CN","frontmatter":{"category":["Java"],"description":"累加器 提示 如何使用数据分片、哈希优化、去伪共享提高累加器性能？ 前面几节中，我们讲到锁、自旋+CAS、原子类。对于如下代码，如果我们希望将其改造成线程安全的，那么该如何来做呢？ public class Counter { private long sum; public long get() { return sum; } public void add(long value) { sum += value; } }","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/multithreading/lockless/LongAdder.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"累加器"}],["meta",{"property":"og:description","content":"累加器 提示 如何使用数据分片、哈希优化、去伪共享提高累加器性能？ 前面几节中，我们讲到锁、自旋+CAS、原子类。对于如下代码，如果我们希望将其改造成线程安全的，那么该如何来做呢？ public class Counter { private long sum; public long get() { return sum; } public void add(long value) { sum += value; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/multithreading/lockless/LongAdder.html"}]]},"headers":[{"level":2,"title":"一、基本用法","slug":"一、基本用法","link":"#一、基本用法","children":[]},{"level":2,"title":"二、数据分片","slug":"二、数据分片","link":"#二、数据分片","children":[]},{"level":2,"title":"三、哈希优化","slug":"三、哈希优化","link":"#三、哈希优化","children":[]},{"level":2,"title":"四、去伪共享","slug":"四、去伪共享","link":"#四、去伪共享","children":[]},{"level":2,"title":"五、非准确求和","slug":"五、非准确求和","link":"#五、非准确求和","children":[]},{"level":2,"title":"六、思考题","slug":"六、思考题","link":"#六、思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":13.65,"words":4095},"filePathRelative":"zh/language/Java/multithreading/lockless/LongAdder.md","localizedDate":"2022年12月9日","excerpt":"<h1> <strong>累加器</strong></h1>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p><strong>如何使用数据分片、哈希优化、去伪共享提高累加器性能？</strong></p>\\n</div>\\n<p>前面几节中，我们讲到锁、自旋+CAS、原子类。对于如下代码，如果我们希望将其改造成线程安全的，那么该如何来做呢？</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>public class Counter {\\n  private long sum;\\n\\n  public long get() {\\n    return sum;\\n  }\\n\\n  public void add(long value) {\\n    sum += value;\\n  }\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
