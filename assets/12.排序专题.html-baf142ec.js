const n=JSON.parse('{"key":"v-bc22e9c6","path":"/zh/basics/algorithm/12.%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98.html","title":"第12章 排序","lang":"zh-CN","frontmatter":{"icon":"article","date":"2021-11-01T00:00:00.000Z","category":["算法"],"tag":["排序"],"description":"第12章 排序 排序的基础知识 大根堆模板 /** * 调整为大顶堆 * @param arr 待调整的数组 * @param parent 当前父节点的下标 * @param length 需要对多少个元素进行调整 */ private static void adjustHeap(int[] arr, int parent, int length){ //临时保存父节点 int temp = arr[parent]; //左子节点的下标 int child = 2 * parent + 1; //如果子节点的下标大于等于当前需要比较的元素个数，则结束循环 while(child &lt; length){ //判断左子节点和右子节点的大小,若右边大，则把child定位到右边 if(child + 1 &lt; length &amp;&amp; arr[child] &lt; arr[child + 1]){ child ++; } //若child大于父节点，则交换位置，否则退出循环 if(arr[child] &gt; temp){ //父子节点交换位置 arr[parent] = arr[child]; //因为交换位置之后，不能保证当前的子节点是它子树的最大值，所以需要继续向下比较， //把当前子节点设置为下次循环的父节点，同时，找到它的左子节点，继续下次循环 parent = child; child = 2 * parent + 1; }else{ //如果当前子节点小于等于父节点，则说明此时的父节点已经是最大值了， //因此无需继续循环 break; } } //把当前节点值替换为最开始暂存的父节点值 arr[parent] = temp; } public static void main(String[] args) { int[] arr = {4,1,9,3,7,8,5,6,2}; //构建一个大顶堆，从最下面的非叶子节点开始向上遍历 for (int i = arr.length/2 - 1 ; i &gt;= 0; i--) { adjustHeap(arr,i,arr.length); } System.out.println(Arrays.toString(arr)); } //打印结果： [9, 7, 8, 6, 1, 4, 5, 3, 2]。 和我们分析的结果一模一样","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/algorithm/12.%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"第12章 排序"}],["meta",{"property":"og:description","content":"第12章 排序 排序的基础知识 大根堆模板 /** * 调整为大顶堆 * @param arr 待调整的数组 * @param parent 当前父节点的下标 * @param length 需要对多少个元素进行调整 */ private static void adjustHeap(int[] arr, int parent, int length){ //临时保存父节点 int temp = arr[parent]; //左子节点的下标 int child = 2 * parent + 1; //如果子节点的下标大于等于当前需要比较的元素个数，则结束循环 while(child &lt; length){ //判断左子节点和右子节点的大小,若右边大，则把child定位到右边 if(child + 1 &lt; length &amp;&amp; arr[child] &lt; arr[child + 1]){ child ++; } //若child大于父节点，则交换位置，否则退出循环 if(arr[child] &gt; temp){ //父子节点交换位置 arr[parent] = arr[child]; //因为交换位置之后，不能保证当前的子节点是它子树的最大值，所以需要继续向下比较， //把当前子节点设置为下次循环的父节点，同时，找到它的左子节点，继续下次循环 parent = child; child = 2 * parent + 1; }else{ //如果当前子节点小于等于父节点，则说明此时的父节点已经是最大值了， //因此无需继续循环 break; } } //把当前节点值替换为最开始暂存的父节点值 arr[parent] = temp; } public static void main(String[] args) { int[] arr = {4,1,9,3,7,8,5,6,2}; //构建一个大顶堆，从最下面的非叶子节点开始向上遍历 for (int i = arr.length/2 - 1 ; i &gt;= 0; i--) { adjustHeap(arr,i,arr.length); } System.out.println(Arrays.toString(arr)); } //打印结果： [9, 7, 8, 6, 1, 4, 5, 3, 2]。 和我们分析的结果一模一样"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"排序"}],["meta",{"property":"article:published_time","content":"2021-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/algorithm/12.%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98.html"}]]},"headers":[{"level":2,"title":"排序的基础知识","slug":"排序的基础知识","link":"#排序的基础知识","children":[{"level":3,"title":"大根堆模板","slug":"大根堆模板","link":"#大根堆模板","children":[]},{"level":3,"title":"归并排序模板","slug":"归并排序模板","link":"#归并排序模板","children":[]},{"level":3,"title":"剑指offerⅡ74：合并区间","slug":"剑指offerii74-合并区间","link":"#剑指offerii74-合并区间","children":[]}]},{"level":2,"title":"计数排序","slug":"计数排序","link":"#计数排序","children":[{"level":3,"title":"剑指offerⅡ75：数组相对排序","slug":"剑指offerii75-数组相对排序","link":"#剑指offerii75-数组相对排序","children":[]}]},{"level":2,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[{"level":3,"title":"剑指offerⅡ76：数组中第K大的数字","slug":"剑指offerii76-数组中第k大的数字","link":"#剑指offerii76-数组中第k大的数字","children":[]}]},{"level":2,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[{"level":3,"title":"剑指offerⅡ77：链表排序","slug":"剑指offerii77-链表排序","link":"#剑指offerii77-链表排序","children":[]},{"level":3,"title":"剑指offerⅡ78：合并排序链表","slug":"剑指offerii78-合并排序链表","link":"#剑指offerii78-合并排序链表","children":[]}]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":4.81,"words":1442},"filePathRelative":"zh/basics/algorithm/12.排序专题.md","localizedDate":"2021年11月1日","excerpt":"<h1> 第12章 排序</h1>\\n<h2> 排序的基础知识</h2>\\n<h3> 大根堆模板</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/**\\n * 调整为大顶堆\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">arr</span>   待调整的数组\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">parent</span>   当前父节点的下标\\n * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">length</span>   需要对多少个元素进行调整\\n */</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">adjustHeap</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arr<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> parent<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//临时保存父节点</span>\\n    <span class=\\"token keyword\\">int</span> temp <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>parent<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//左子节点的下标</span>\\n    <span class=\\"token keyword\\">int</span> child <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> parent <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//如果子节点的下标大于等于当前需要比较的元素个数，则结束循环</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>child <span class=\\"token operator\\">&lt;</span> length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//判断左子节点和右子节点的大小,若右边大，则把child定位到右边</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>child <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">&lt;</span> length <span class=\\"token operator\\">&amp;&amp;</span> arr<span class=\\"token punctuation\\">[</span>child<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">[</span>child <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            child <span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">//若child大于父节点，则交换位置，否则退出循环</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">[</span>child<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> temp<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">//父子节点交换位置</span>\\n            arr<span class=\\"token punctuation\\">[</span>parent<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>child<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">//因为交换位置之后，不能保证当前的子节点是它子树的最大值，所以需要继续向下比较，</span>\\n            <span class=\\"token comment\\">//把当前子节点设置为下次循环的父节点，同时，找到它的左子节点，继续下次循环</span>\\n            parent <span class=\\"token operator\\">=</span> child<span class=\\"token punctuation\\">;</span>\\n            child <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> parent <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">//如果当前子节点小于等于父节点，则说明此时的父节点已经是最大值了，</span>\\n            <span class=\\"token comment\\">//因此无需继续循环</span>\\n            <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">//把当前节点值替换为最开始暂存的父节点值</span>\\n    arr<span class=\\"token punctuation\\">[</span>parent<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> temp<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arr <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//构建一个大顶堆，从最下面的非叶子节点开始向上遍历</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">adjustHeap</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span>i<span class=\\"token punctuation\\">,</span>arr<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Arrays</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>    \\n<span class=\\"token comment\\">//打印结果：  [9, 7, 8, 6, 1, 4, 5, 3, 2]。 和我们分析的结果一模一样</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
