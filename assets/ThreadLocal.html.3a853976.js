const e=JSON.parse('{"key":"v-e2f9e85e","path":"/zh/language/Java/multithreading/lockless/ThreadLocal.html","title":"ThreadLocal","lang":"zh-CN","frontmatter":{"category":["Java"],"description":"对于无锁编程，我们已经讲解了CAS、原子类、累加器，本节，我们讲解无锁编程中的最后一个知识点：ThreadLocal。我们知道，共享变量是代码存在线程安全的根本原因之一。在某些特殊的业务场景下，我们可以使用ThreadLocal线程局部变量替代共享变量，以实现在不需要加锁的情况下达到线程安全。 一、基本用法 在Java中，我们可以将变量粗略的划分为两类...","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/multithreading/lockless/ThreadLocal.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"ThreadLocal"}],["meta",{"property":"og:description","content":"对于无锁编程，我们已经讲解了CAS、原子类、累加器，本节，我们讲解无锁编程中的最后一个知识点：ThreadLocal。我们知道，共享变量是代码存在线程安全的根本原因之一。在某些特殊的业务场景下，我们可以使用ThreadLocal线程局部变量替代共享变量，以实现在不需要加锁的情况下达到线程安全。 一、基本用法 在Java中，我们可以将变量粗略的划分为两类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/multithreading/lockless/ThreadLocal.html"}]]},"excerpt":"","headers":[{"level":2,"title":"一、基本用法","slug":"一、基本用法","link":"#一、基本用法","children":[]},{"level":2,"title":"二、实现原理","slug":"二、实现原理","link":"#二、实现原理","children":[]},{"level":2,"title":"三、应用场景","slug":"三、应用场景","link":"#三、应用场景","children":[]},{"level":2,"title":"四、课后思考题","slug":"四、课后思考题","link":"#四、课后思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":7.82,"words":2346},"autoDesc":true,"localizedDate":"2022年12月9日","filePathRelative":"zh/language/Java/multithreading/lockless/ThreadLocal.md"}');export{e as data};
