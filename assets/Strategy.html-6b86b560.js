const e=JSON.parse('{"key":"v-aceaa0aa","path":"/zh/basics/design-patterns/behavioral-patterns/Strategy.html","title":"策略模式","lang":"zh-CN","frontmatter":{"category":["行为型设计模式"],"description":"策略模式 模板模式主要起到代码复用和扩展的作用。除此之外，我们还讲到了回调，它跟模板模式的作用类似，但使用起来更加灵活。它们之间的主要区别在于代码实现，模板模式基于继承来实现，回调基于组合来实现。 在实际的项目开发中，策略模式也比较常用。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。不过，它的作用还不止如此。它也可以像模板模式那样，提供框架的扩展点等等。 策略模式的原理与实现 策略模式，英文全称是 Strategy Design Pattern。在 GoF 的《设计模式》一书中，它是这样定义的：","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/design-patterns/behavioral-patterns/Strategy.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"策略模式"}],["meta",{"property":"og:description","content":"策略模式 模板模式主要起到代码复用和扩展的作用。除此之外，我们还讲到了回调，它跟模板模式的作用类似，但使用起来更加灵活。它们之间的主要区别在于代码实现，模板模式基于继承来实现，回调基于组合来实现。 在实际的项目开发中，策略模式也比较常用。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。不过，它的作用还不止如此。它也可以像模板模式那样，提供框架的扩展点等等。 策略模式的原理与实现 策略模式，英文全称是 Strategy Design Pattern。在 GoF 的《设计模式》一书中，它是这样定义的："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/design-patterns/behavioral-patterns/Strategy.html"}]]},"headers":[{"level":2,"title":"策略模式的原理与实现","slug":"策略模式的原理与实现","link":"#策略模式的原理与实现","children":[{"level":3,"title":"1. 策略的定义","slug":"_1-策略的定义","link":"#_1-策略的定义","children":[]},{"level":3,"title":"2. 策略的创建","slug":"_2-策略的创建","link":"#_2-策略的创建","children":[]},{"level":3,"title":"3. 策略的使用","slug":"_3-策略的使用","link":"#_3-策略的使用","children":[]}]},{"level":2,"title":"如何利用策略模式避免分支判断？","slug":"如何利用策略模式避免分支判断","link":"#如何利用策略模式避免分支判断","children":[]},{"level":2,"title":"问题解决与思路","slug":"问题解决与思路","link":"#问题解决与思路","children":[]},{"level":2,"title":"代码实现与分析","slug":"代码实现与分析","link":"#代码实现与分析","children":[]},{"level":2,"title":"代码优化与重构","slug":"代码优化与重构","link":"#代码优化与重构","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":18.26,"words":5479},"filePathRelative":"zh/basics/design-patterns/behavioral-patterns/Strategy.md","localizedDate":"2022年12月9日","excerpt":"<h1> 策略模式</h1>\\n<blockquote>\\n<p>模板模式主要起到代码复用和扩展的作用。除此之外，我们还讲到了回调，它跟模板模式的作用类似，但使用起来更加灵活。它们之间的主要区别在于代码实现，模板模式基于继承来实现，回调基于组合来实现。</p>\\n</blockquote>\\n<p>在实际的项目开发中，策略模式也比较常用。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。不过，它的作用还不止如此。它也可以像模板模式那样，提供框架的扩展点等等。</p>\\n<h2> 策略模式的原理与实现</h2>\\n<p>策略模式，英文全称是 Strategy Design Pattern。在 GoF 的《设计模式》一书中，它是这样定义的：</p>","autoDesc":true}');export{e as data};
