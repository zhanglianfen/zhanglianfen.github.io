const e=JSON.parse('{"key":"v-05782208","path":"/zh/language/Java/multithreading/basic/thread.html","title":"线程","lang":"zh-CN","frontmatter":{"category":["Java"],"tag":["多线程"],"description":"线程 提示 有了进程为什么还要有线程？线程越多执行就越快吗？ 尽管在平时的开发中，我们很少会直接编写多线程代码，但是，常用的框架和容器，无一例外的都会用到多线程。比如，Dubbo、Tomcat均使用多线程来处理请求。业务代码一般运行在这些框架或容器中，因此，也就间接的会用到多线程。只有对多线程的使用和原理有透彻的了解，我们才能编写出线程安全且高性能的代码。 在正式的学习如何编写多线程代码之前，我们先介绍多线程方面的一些基础理论知识，其中包括：线程的由来、调度策略、线程状态、线程模型、Java线程的实现方式。","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/multithreading/basic/thread.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"线程"}],["meta",{"property":"og:description","content":"线程 提示 有了进程为什么还要有线程？线程越多执行就越快吗？ 尽管在平时的开发中，我们很少会直接编写多线程代码，但是，常用的框架和容器，无一例外的都会用到多线程。比如，Dubbo、Tomcat均使用多线程来处理请求。业务代码一般运行在这些框架或容器中，因此，也就间接的会用到多线程。只有对多线程的使用和原理有透彻的了解，我们才能编写出线程安全且高性能的代码。 在正式的学习如何编写多线程代码之前，我们先介绍多线程方面的一些基础理论知识，其中包括：线程的由来、调度策略、线程状态、线程模型、Java线程的实现方式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"多线程"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/multithreading/basic/thread.html"}]]},"headers":[{"level":2,"title":"线程概述","slug":"线程概述","link":"#线程概述","children":[{"level":3,"title":"一、线程由来","slug":"一、线程由来","link":"#一、线程由来","children":[]},{"level":3,"title":"二、调度策略","slug":"二、调度策略","link":"#二、调度策略","children":[]},{"level":3,"title":"三、线程状态","slug":"三、线程状态","link":"#三、线程状态","children":[]}]},{"level":2,"title":"线程模型","slug":"线程模型","link":"#线程模型","children":[{"level":3,"title":"一、线程模型概述","slug":"一、线程模型概述","link":"#一、线程模型概述","children":[]},{"level":3,"title":"二、内核线程","slug":"二、内核线程","link":"#二、内核线程","children":[]},{"level":3,"title":"三、用户线程（协程）","slug":"三、用户线程-协程","link":"#三、用户线程-协程","children":[]},{"level":3,"title":"四、混合线程","slug":"四、混合线程","link":"#四、混合线程","children":[]},{"level":3,"title":"五、Java线程的实现原理","slug":"五、java线程的实现原理","link":"#五、java线程的实现原理","children":[]}]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":25.31,"words":7594},"filePathRelative":"zh/language/Java/multithreading/basic/thread.md","localizedDate":"2022年12月9日","excerpt":"<h1> <strong>线程</strong></h1>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>有了进程为什么还要有线程？线程越多执行就越快吗？</p>\\n<p>尽管在平时的开发中，我们很少会直接编写多线程代码，但是，常用的框架和容器，无一例外的都会用到多线程。比如，Dubbo、Tomcat均使用多线程来处理请求。业务代码一般运行在这些框架或容器中，因此，也就间接的会用到多线程。只有对多线程的使用和原理有透彻的了解，我们才能编写出线程安全且高性能的代码。</p>\\n<p>在正式的学习如何编写多线程代码之前，我们先介绍多线程方面的一些基础理论知识，其中包括：线程的由来、调度策略、线程状态、线程模型、Java线程的实现方式。</p>\\n</div>","autoDesc":true}');export{e as data};
