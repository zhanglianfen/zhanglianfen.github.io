const e=JSON.parse('{"key":"v-f782e4b4","path":"/zh/basics/design-patterns/structural-patterns/proxy.html","title":"代理模式","lang":"zh-CN","frontmatter":{"description":"前面几节学习了设计模式中的创建型模式。创建型模式主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。 其中，单例模式用来创建全局唯一的对象。工厂模式用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。建造者模式是用来创建复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的...","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/design-patterns/structural-patterns/proxy.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"代理模式"}],["meta",{"property":"og:description","content":"前面几节学习了设计模式中的创建型模式。创建型模式主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。 其中，单例模式用来创建全局唯一的对象。工厂模式用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。建造者模式是用来创建复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/design-patterns/structural-patterns/proxy.html"}]]},"excerpt":"","headers":[{"level":2,"title":"代理模式原理解析","slug":"代理模式原理解析","link":"#代理模式原理解析","children":[]},{"level":2,"title":"动态代理原理解析","slug":"动态代理原理解析","link":"#动态代理原理解析","children":[]},{"level":2,"title":"代理模式应用场景","slug":"代理模式应用场景","link":"#代理模式应用场景","children":[{"level":3,"title":"1. 业务系统的非功能性需求开发","slug":"_1-业务系统的非功能性需求开发","link":"#_1-业务系统的非功能性需求开发","children":[]},{"level":3,"title":"2. 代理模式在 RPC、缓存中的应用","slug":"_2-代理模式在-rpc、缓存中的应用","link":"#_2-代理模式在-rpc、缓存中的应用","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":12.48,"words":3743},"autoDesc":true,"localizedDate":"2022年12月9日","filePathRelative":"zh/basics/design-patterns/structural-patterns/proxy.md"}');export{e as data};
