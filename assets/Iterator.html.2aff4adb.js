const e=JSON.parse('{"key":"v-9be5a0e0","path":"/zh/basics/design-patterns/behavioral-patterns/Iterator.html","title":"迭代器模式","lang":"zh-CN","frontmatter":{"category":["行为型设计模式"],"description":"状态模式是状态机的一种实现方法。它通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，以此来避免状态机类中的分支判断逻辑，应对状态机类代码的复杂性。 迭代器模式，它用来遍历集合对象。不过，很多编程语言都将迭代器作为一个基础的类库，直接提供出来了。在平时开发中，特别是业务开发，我们直接使用即可，很少会自己去实现一个迭代器。不过，知其然知其所以然，弄...","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/design-patterns/behavioral-patterns/Iterator.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"迭代器模式"}],["meta",{"property":"og:description","content":"状态模式是状态机的一种实现方法。它通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，以此来避免状态机类中的分支判断逻辑，应对状态机类代码的复杂性。 迭代器模式，它用来遍历集合对象。不过，很多编程语言都将迭代器作为一个基础的类库，直接提供出来了。在平时开发中，特别是业务开发，我们直接使用即可，很少会自己去实现一个迭代器。不过，知其然知其所以然，弄..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/design-patterns/behavioral-patterns/Iterator.html"}]]},"excerpt":"","headers":[{"level":2,"title":"迭代器模式的原理和实现","slug":"迭代器模式的原理和实现","link":"#迭代器模式的原理和实现","children":[]},{"level":2,"title":"迭代器模式的优势","slug":"迭代器模式的优势","link":"#迭代器模式的优势","children":[]},{"level":2,"title":"在遍历的同时增删集合元素会发生什么？","slug":"在遍历的同时增删集合元素会发生什么","link":"#在遍历的同时增删集合元素会发生什么","children":[]},{"level":2,"title":"如何应对遍历时改变集合导致的未决行为？","slug":"如何应对遍历时改变集合导致的未决行为","link":"#如何应对遍历时改变集合导致的未决行为","children":[]},{"level":2,"title":"如何在遍历的同时安全地删除集合元素？","slug":"如何在遍历的同时安全地删除集合元素","link":"#如何在遍历的同时安全地删除集合元素","children":[]},{"level":2,"title":"如何实现一个支持“快照”功能的迭代器？","slug":"如何实现一个支持-快照-功能的迭代器","link":"#如何实现一个支持-快照-功能的迭代器","children":[{"level":3,"title":"解决方案一","slug":"解决方案一","link":"#解决方案一","children":[]},{"level":3,"title":"解决方案二","slug":"解决方案二","link":"#解决方案二","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":32.56,"words":9768},"autoDesc":true,"localizedDate":"2022年12月9日","filePathRelative":"zh/basics/design-patterns/behavioral-patterns/Iterator.md"}');export{e as data};
