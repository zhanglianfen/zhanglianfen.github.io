const e=JSON.parse('{"key":"v-e0b63f00","path":"/zh/basics/algorithm/5.%E5%93%88%E5%B8%8C%E4%B8%93%E9%A2%98.html","title":"第5章 哈希表","lang":"zh-CN","frontmatter":{"icon":"article","date":"2021-11-01T00:00:00.000Z","category":["算法"],"tag":["哈希","原地哈希"],"description":"第5章 哈希表 哈希表的设计 剑指offerⅡ30：插入、删除和随机访问都是O(1)的容器 剑指offerⅡ31：最近最少使用缓存 运用所掌握的数据结构，设计和实现一个 LRU (Least Recently Used，最近最少使用) 缓存机制 。 实现 LRUCache 类： LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/algorithm/5.%E5%93%88%E5%B8%8C%E4%B8%93%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"第5章 哈希表"}],["meta",{"property":"og:description","content":"第5章 哈希表 哈希表的设计 剑指offerⅡ30：插入、删除和随机访问都是O(1)的容器 剑指offerⅡ31：最近最少使用缓存 运用所掌握的数据结构，设计和实现一个 LRU (Least Recently Used，最近最少使用) 缓存机制 。 实现 LRUCache 类： LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"哈希"}],["meta",{"property":"article:tag","content":"原地哈希"}],["meta",{"property":"article:published_time","content":"2021-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/algorithm/5.%E5%93%88%E5%B8%8C%E4%B8%93%E9%A2%98.html"}]]},"headers":[{"level":2,"title":"哈希表的设计","slug":"哈希表的设计","link":"#哈希表的设计","children":[{"level":3,"title":"剑指offerⅡ30：插入、删除和随机访问都是O(1)的容器","slug":"剑指offerii30-插入、删除和随机访问都是o-1-的容器","link":"#剑指offerii30-插入、删除和随机访问都是o-1-的容器","children":[]},{"level":3,"title":"剑指offerⅡ31：最近最少使用缓存","slug":"剑指offerii31-最近最少使用缓存","link":"#剑指offerii31-最近最少使用缓存","children":[]}]},{"level":2,"title":"哈希表的应用","slug":"哈希表的应用","link":"#哈希表的应用","children":[{"level":3,"title":"剑指offerⅡ32：有效的变位词","slug":"剑指offerii32-有效的变位词","link":"#剑指offerii32-有效的变位词","children":[]},{"level":3,"title":"剑指offerⅡ33：变位词组","slug":"剑指offerii33-变位词组","link":"#剑指offerii33-变位词组","children":[]},{"level":3,"title":"剑指offerⅡ34：外星语言是否排序","slug":"剑指offerii34-外星语言是否排序","link":"#剑指offerii34-外星语言是否排序","children":[]},{"level":3,"title":"剑指offerⅡ35：最小时间差","slug":"剑指offerii35-最小时间差","link":"#剑指offerii35-最小时间差","children":[]}]},{"level":2,"title":"原地哈希","slug":"原地哈希","link":"#原地哈希","children":[{"level":3,"title":"剑指offerⅠ03：数组中重复的数字","slug":"剑指offeri03-数组中重复的数字","link":"#剑指offeri03-数组中重复的数字","children":[]},{"level":3,"title":"LC41：缺失的第一个正数","slug":"lc41-缺失的第一个正数","link":"#lc41-缺失的第一个正数","children":[]}]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":7.95,"words":2386},"filePathRelative":"zh/basics/algorithm/5.哈希专题.md","localizedDate":"2021年11月1日","excerpt":"<h1> 第5章 哈希表</h1>\\n<h2> 哈希表的设计</h2>\\n<h3> 剑指offerⅡ30：插入、删除和随机访问都是O(1)的容器</h3>\\n<h3> 剑指offerⅡ31：最近最少使用缓存</h3>\\n<p>运用所掌握的数据结构，设计和实现一个 <a href=\\"https://baike.baidu.com/item/LRU\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LRU (Least Recently Used，最近最少使用) 缓存机制</a> 。</p>\\n<p>实现 <code>LRUCache</code> 类：</p>\\n<ul>\\n<li><code>LRUCache(int capacity)</code> 以正整数作为容量 <code>capacity</code> 初始化 LRU 缓存</li>\\n<li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li>\\n<li><code>void put(int key, int value)</code> 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li>\\n</ul>","autoDesc":true}');export{e as data};
