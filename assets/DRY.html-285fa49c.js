const n=JSON.parse(`{"key":"v-55244a59","path":"/zh/basics/design-principles/DRY.html","title":"复用的代码就一定违背DRY吗？如何提高代码的复用性？","lang":"zh-CN","frontmatter":{"category":["设计原则和思想"],"description":"复用的代码就一定违背DRY吗？如何提高代码的复用性？ DRY 原则（Don’t Repeat Yourself） DRY 原则的定义非常简单，我就不再过度解读。今天，我们主要讲三种典型的代码重复情况，它们分别是：实现逻辑重复、功能语义重复和代码执行重复。这三种代码重复，有的看似违反 DRY，实际上并不违反；有的看似不违反，实际上却违反了。 实现逻辑重复 我们先来看下面这样一段代码是否违反了 DRY 原则。如果违反了，你觉得应该如何重构，才能让它满足 DRY 原则？如果没有违反，那又是为什么呢？ public class UserAuthenticator { public void authenticate(String username, String password) { if (!isValidUsername(username)) { // ...throw InvalidUsernameException... } if (!isValidPassword(password)) { // ...throw InvalidPasswordException... } //... 省略其他代码... } private boolean isValidUsername(String username) { // check not null, not empty if (StringUtils.isBlank(username)) { return false; } // check length: 4~64 int length = username.length(); if (length &lt; 4 || length &gt; 64) { return false; } // contains only lowcase characters if (!StringUtils.isAllLowerCase(username)) { return false; } // contains only a~z,0~9,dot for (int i = 0; i &lt; length; ++i) { char c = username.charAt(i); if (!(c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= '0' &amp;&amp; c &lt;= '9') || c == '.') { return false; } } return true; } private boolean isValidPassword(String password) { // check not null, not empty if (StringUtils.isBlank(password)) { return false; } // check length: 4~64 int length = password.length(); if (length &lt; 4 || length &gt; 64) { return false; } // contains only lowcase characters if (!StringUtils.isAllLowerCase(password)) { return false; } // contains only a~z,0~9,dot for (int i = 0; i &lt; length; ++i) { char c = password.charAt(i); if (!(c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= '0' &amp;&amp; c &lt;= '9') || c == '.') { return false; } } return true; } }","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/design-principles/DRY.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"复用的代码就一定违背DRY吗？如何提高代码的复用性？"}],["meta",{"property":"og:description","content":"复用的代码就一定违背DRY吗？如何提高代码的复用性？ DRY 原则（Don’t Repeat Yourself） DRY 原则的定义非常简单，我就不再过度解读。今天，我们主要讲三种典型的代码重复情况，它们分别是：实现逻辑重复、功能语义重复和代码执行重复。这三种代码重复，有的看似违反 DRY，实际上并不违反；有的看似不违反，实际上却违反了。 实现逻辑重复 我们先来看下面这样一段代码是否违反了 DRY 原则。如果违反了，你觉得应该如何重构，才能让它满足 DRY 原则？如果没有违反，那又是为什么呢？ public class UserAuthenticator { public void authenticate(String username, String password) { if (!isValidUsername(username)) { // ...throw InvalidUsernameException... } if (!isValidPassword(password)) { // ...throw InvalidPasswordException... } //... 省略其他代码... } private boolean isValidUsername(String username) { // check not null, not empty if (StringUtils.isBlank(username)) { return false; } // check length: 4~64 int length = username.length(); if (length &lt; 4 || length &gt; 64) { return false; } // contains only lowcase characters if (!StringUtils.isAllLowerCase(username)) { return false; } // contains only a~z,0~9,dot for (int i = 0; i &lt; length; ++i) { char c = username.charAt(i); if (!(c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= '0' &amp;&amp; c &lt;= '9') || c == '.') { return false; } } return true; } private boolean isValidPassword(String password) { // check not null, not empty if (StringUtils.isBlank(password)) { return false; } // check length: 4~64 int length = password.length(); if (length &lt; 4 || length &gt; 64) { return false; } // contains only lowcase characters if (!StringUtils.isAllLowerCase(password)) { return false; } // contains only a~z,0~9,dot for (int i = 0; i &lt; length; ++i) { char c = password.charAt(i); if (!(c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= '0' &amp;&amp; c &lt;= '9') || c == '.') { return false; } } return true; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/design-principles/DRY.html"}]]},"headers":[{"level":2,"title":"DRY 原则（Don’t Repeat Yourself）","slug":"dry-原则-don-t-repeat-yourself","link":"#dry-原则-don-t-repeat-yourself","children":[{"level":3,"title":"实现逻辑重复","slug":"实现逻辑重复","link":"#实现逻辑重复","children":[]},{"level":3,"title":"功能语义重复","slug":"功能语义重复","link":"#功能语义重复","children":[]},{"level":3,"title":"代码执行重复","slug":"代码执行重复","link":"#代码执行重复","children":[]}]},{"level":2,"title":"代码复用性（Code Reusability）","slug":"代码复用性-code-reusability","link":"#代码复用性-code-reusability","children":[{"level":3,"title":"什么是代码的复用性？","slug":"什么是代码的复用性","link":"#什么是代码的复用性","children":[]},{"level":3,"title":"怎么提高代码复用性？","slug":"怎么提高代码复用性","link":"#怎么提高代码复用性","children":[]},{"level":3,"title":"辩证思考和灵活应用","slug":"辩证思考和灵活应用","link":"#辩证思考和灵活应用","children":[]}]},{"level":2,"title":"重点回顾","slug":"重点回顾","link":"#重点回顾","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":15.91,"words":4772},"filePathRelative":"zh/basics/design-principles/DRY.md","localizedDate":"2022年12月9日","excerpt":"<h1> 复用的代码就一定违背DRY吗？如何提高代码的复用性？</h1>\\n<h2> DRY 原则（Don’t Repeat Yourself）</h2>\\n<p>DRY 原则的定义非常简单，我就不再过度解读。今天，我们主要讲三种典型的代码重复情况，它们分别是：实现逻辑重复、功能语义重复和代码执行重复。这三种代码重复，有的看似违反 DRY，实际上并不违反；有的看似不违反，实际上却违反了。</p>\\n<h3> 实现逻辑重复</h3>\\n<p>我们先来看下面这样一段代码是否违反了 DRY 原则。如果违反了，你觉得应该如何重构，才能让它满足 DRY 原则？如果没有违反，那又是为什么呢？</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">UserAuthenticator</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">authenticate</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> username<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> password<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token function\\">isValidUsername</span><span class=\\"token punctuation\\">(</span>username<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// ...throw InvalidUsernameException...</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token function\\">isValidPassword</span><span class=\\"token punctuation\\">(</span>password<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// ...throw InvalidPasswordException...</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">//... 省略其他代码...</span>\\n  <span class=\\"token punctuation\\">}</span>\\n    \\n  <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isValidUsername</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> username<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// check not null, not empty</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StringUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isBlank</span><span class=\\"token punctuation\\">(</span>username<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// check length: 4~64</span>\\n    <span class=\\"token keyword\\">int</span> length <span class=\\"token operator\\">=</span> username<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>length <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">4</span> <span class=\\"token operator\\">||</span> length <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">64</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// contains only lowcase characters</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token class-name\\">StringUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isAllLowerCase</span><span class=\\"token punctuation\\">(</span>username<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// contains only a~z,0~9,dot</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> length<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">char</span> c <span class=\\"token operator\\">=</span> username<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">&gt;=</span> <span class=\\"token char\\">'a'</span> <span class=\\"token operator\\">&amp;&amp;</span> c <span class=\\"token operator\\">&lt;=</span> <span class=\\"token char\\">'z'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">&gt;=</span> <span class=\\"token char\\">'0'</span> <span class=\\"token operator\\">&amp;&amp;</span> c <span class=\\"token operator\\">&lt;=</span> <span class=\\"token char\\">'9'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> c <span class=\\"token operator\\">==</span> <span class=\\"token char\\">'.'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n    \\n  <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isValidPassword</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> password<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// check not null, not empty</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StringUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isBlank</span><span class=\\"token punctuation\\">(</span>password<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// check length: 4~64</span>\\n    <span class=\\"token keyword\\">int</span> length <span class=\\"token operator\\">=</span> password<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>length <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">4</span> <span class=\\"token operator\\">||</span> length <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">64</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// contains only lowcase characters</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token class-name\\">StringUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isAllLowerCase</span><span class=\\"token punctuation\\">(</span>password<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// contains only a~z,0~9,dot</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> length<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">char</span> c <span class=\\"token operator\\">=</span> password<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">&gt;=</span> <span class=\\"token char\\">'a'</span> <span class=\\"token operator\\">&amp;&amp;</span> c <span class=\\"token operator\\">&lt;=</span> <span class=\\"token char\\">'z'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">&gt;=</span> <span class=\\"token char\\">'0'</span> <span class=\\"token operator\\">&amp;&amp;</span> c <span class=\\"token operator\\">&lt;=</span> <span class=\\"token char\\">'9'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> c <span class=\\"token operator\\">==</span> <span class=\\"token char\\">'.'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
