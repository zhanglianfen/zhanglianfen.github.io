const e=JSON.parse('{"key":"v-51de3526","path":"/zh/language/Java/multithreading/thread-manage/executor.html","title":"线程执行框架","lang":"zh-CN","frontmatter":{"category":["Java"],"tag":["多线程"],"description":"线程执行框架 提示 如何获取一个线程所执行的代码的运行结果？ 本节，我们来讲线程执行框架。线程执行框架提供了一系列类，封装了线程创建、关闭、执行、管理等跟业务逻辑无关的代码逻辑，这样做一方面实现了业务逻辑与非业务逻辑的解耦，另一方面方便代码复用，开发者不再需要编写创建线程、启动线程等代码。实际上，上一节中讲到的ThreadPoolExecutor、Executors就隶属于线程执行框架。在开始本节的正式内容之前，我还是给你出一道思考题：如何获取一个线程所执行的代码的运行结果？","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/multithreading/thread-manage/executor.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"线程执行框架"}],["meta",{"property":"og:description","content":"线程执行框架 提示 如何获取一个线程所执行的代码的运行结果？ 本节，我们来讲线程执行框架。线程执行框架提供了一系列类，封装了线程创建、关闭、执行、管理等跟业务逻辑无关的代码逻辑，这样做一方面实现了业务逻辑与非业务逻辑的解耦，另一方面方便代码复用，开发者不再需要编写创建线程、启动线程等代码。实际上，上一节中讲到的ThreadPoolExecutor、Executors就隶属于线程执行框架。在开始本节的正式内容之前，我还是给你出一道思考题：如何获取一个线程所执行的代码的运行结果？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"多线程"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/multithreading/thread-manage/executor.html"}]]},"headers":[{"level":2,"title":"一、Executor、ExecutorService、Executors","slug":"一、executor、executorservice、executors","link":"#一、executor、executorservice、executors","children":[]},{"level":2,"title":"二、Runnable、Callable、Future","slug":"二、runnable、callable、future","link":"#二、runnable、callable、future","children":[]},{"level":2,"title":"三、课后思考题","slug":"三、课后思考题","link":"#三、课后思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":4.65,"words":1396},"filePathRelative":"zh/language/Java/multithreading/thread-manage/executor.md","localizedDate":"2022年12月9日","excerpt":"<h1> 线程执行框架</h1>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p><strong>如何获取一个线程所执行的代码的运行结果？</strong></p>\\n<p>本节，我们来讲线程执行框架。线程执行框架提供了一系列类，封装了线程创建、关闭、执行、管理等跟业务逻辑无关的代码逻辑，这样做一方面实现了业务逻辑与非业务逻辑的解耦，另一方面方便代码复用，开发者不再需要编写创建线程、启动线程等代码。实际上，上一节中讲到的ThreadPoolExecutor、Executors就隶属于线程执行框架。在开始本节的正式内容之前，我还是给你出一道思考题：如何获取一个线程所执行的代码的运行结果？</p>\\n</div>","autoDesc":true}');export{e as data};
