const e=JSON.parse('{"key":"v-204cb96a","path":"/zh/language/Java/basics/io/22.%E9%AB%98%E9%80%9Fio.html","title":"高速I/O（下）","lang":"zh-CN","frontmatter":{"category":["Java IO"],"description":"高速I/O（下） mmap和零拷贝是如何提高I/O读写速度的？ 上一节，我们介绍了I/O读写的底层实现原理，不管读还是写，即便存在DMA，都需要进行2次数据的拷贝和1次系统调用，而1次系统调用又会导致2次用户态和内核态的上下文切换。这也是普通I/O读写值得优化的地方，本节，我们就讲一讲如何利用mmap和零拷贝技术，来提高I/O读写速度。 一、mmap mmap（memory-mapped file，内存映射文件）是提高文件读写性能的有效技术。注意，mmap一般用于文件，像网络这种数据未知的I/O设备，不适合使用mmap。","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/basics/io/22.%E9%AB%98%E9%80%9Fio.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"高速I/O（下）"}],["meta",{"property":"og:description","content":"高速I/O（下） mmap和零拷贝是如何提高I/O读写速度的？ 上一节，我们介绍了I/O读写的底层实现原理，不管读还是写，即便存在DMA，都需要进行2次数据的拷贝和1次系统调用，而1次系统调用又会导致2次用户态和内核态的上下文切换。这也是普通I/O读写值得优化的地方，本节，我们就讲一讲如何利用mmap和零拷贝技术，来提高I/O读写速度。 一、mmap mmap（memory-mapped file，内存映射文件）是提高文件读写性能的有效技术。注意，mmap一般用于文件，像网络这种数据未知的I/O设备，不适合使用mmap。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/basics/io/22.%E9%AB%98%E9%80%9Fio.html"}]]},"headers":[{"level":2,"title":"一、mmap","slug":"一、mmap","link":"#一、mmap","children":[]},{"level":2,"title":"二、零拷贝","slug":"二、零拷贝","link":"#二、零拷贝","children":[]},{"level":2,"title":"三、课后思考题","slug":"三、课后思考题","link":"#三、课后思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":9.58,"words":2873},"filePathRelative":"zh/language/Java/basics/io/22.高速io.md","localizedDate":"2022年12月9日","excerpt":"<h1> <strong>高速I/O（下）</strong></h1>\\n<blockquote>\\n<p><strong>mmap和零拷贝是如何提高I/O读写速度的？</strong></p>\\n</blockquote>\\n<p>上一节，我们介绍了I/O读写的底层实现原理，不管读还是写，即便存在DMA，都需要进行2次数据的拷贝和1次系统调用，而1次系统调用又会导致2次用户态和内核态的上下文切换。这也是普通I/O读写值得优化的地方，本节，我们就讲一讲如何利用mmap和零拷贝技术，来提高I/O读写速度。</p>\\n<h2> <strong>一、mmap</strong></h2>\\n<p>mmap（memory-mapped file，内存映射文件）是提高文件读写性能的有效技术。注意，mmap一般用于文件，像网络这种数据未知的I/O设备，不适合使用mmap。</p>","autoDesc":true}');export{e as data};
