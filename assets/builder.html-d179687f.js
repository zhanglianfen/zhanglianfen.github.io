const e=JSON.parse('{"key":"v-75c16886","path":"/zh/basics/design-patterns/creational-patterns/builder.html","title":"建造者模式（生成器模式）","lang":"zh-CN","frontmatter":{"description":"建造者模式（生成器模式） Builder 模式，中文翻译为建造者模式或者构建者模式，也有人叫它生成器模式。 实际上，建造者模式的原理和代码实现非常简单，掌握起来并不难，难点在于应用场景。比如，你有没有考虑过这样几个问题： 直接使用构造函数或者配合 set 方法就能创建对象，为什么还需要建造者模式来创建呢？ 建造者模式和工厂模式都可以创建对象，那它们两个的区别在哪里呢？ 为什么需要建造者模式？","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/design-patterns/creational-patterns/builder.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"建造者模式（生成器模式）"}],["meta",{"property":"og:description","content":"建造者模式（生成器模式） Builder 模式，中文翻译为建造者模式或者构建者模式，也有人叫它生成器模式。 实际上，建造者模式的原理和代码实现非常简单，掌握起来并不难，难点在于应用场景。比如，你有没有考虑过这样几个问题： 直接使用构造函数或者配合 set 方法就能创建对象，为什么还需要建造者模式来创建呢？ 建造者模式和工厂模式都可以创建对象，那它们两个的区别在哪里呢？ 为什么需要建造者模式？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/design-patterns/creational-patterns/builder.html"}]]},"headers":[{"level":2,"title":"为什么需要建造者模式？","slug":"为什么需要建造者模式","link":"#为什么需要建造者模式","children":[]},{"level":2,"title":"与工厂模式有什么区别？","slug":"与工厂模式有什么区别","link":"#与工厂模式有什么区别","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":11.37,"words":3411},"filePathRelative":"zh/basics/design-patterns/creational-patterns/builder.md","localizedDate":"2022年12月9日","excerpt":"<h1> 建造者模式（生成器模式）</h1>\\n<p><strong>Builder 模式</strong>，中文翻译为<strong>建造者模式</strong>或者<strong>构建者模式</strong>，也有人叫它<strong>生成器模式</strong>。</p>\\n<p>实际上，建造者模式的原理和代码实现非常简单，掌握起来并不难，难点在于应用场景。比如，你有没有考虑过这样几个问题：</p>\\n<p>直接使用构造函数或者配合 set 方法就能创建对象，为什么还需要建造者模式来创建呢？</p>\\n<p>建造者模式和工厂模式都可以创建对象，那它们两个的区别在哪里呢？</p>\\n<h2> 为什么需要建造者模式？</h2>","autoDesc":true}');export{e as data};
