const e=JSON.parse('{"key":"v-000dfcff","path":"/zh/basics/design-patterns/","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","icon":"article","date":"2022-12-09T00:00:00.000Z","category":["设计模式"],"star":true,"description":"SOLID原则 SOLID原则 这五条原则是在罗伯特·马丁的著 作《敏捷软件开发：原则、模式与实践》中首次提出的。 SOLID 是让软件设计更易于理解、更加灵活和更易于维护的 五个原则的简称。与生活中所有事情一样，盲目遵守这些原则可能会弊大于利。在程序架构中应用这些原则可能会使其变得过于复杂。我对于是否真的有能够同时应用所有这五条原则的成功软件产品表示怀疑。有原则是件好事，但是也要时刻从实用的角度来 考量，不要把这里的每句话当作放之四海皆准的教条。 单一职责原则 单一职责原则（Single Responsibility Principle）：修改一个类的原因只能有一个。","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/design-patterns/"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"SOLID原则 SOLID原则 这五条原则是在罗伯特·马丁的著 作《敏捷软件开发：原则、模式与实践》中首次提出的。 SOLID 是让软件设计更易于理解、更加灵活和更易于维护的 五个原则的简称。与生活中所有事情一样，盲目遵守这些原则可能会弊大于利。在程序架构中应用这些原则可能会使其变得过于复杂。我对于是否真的有能够同时应用所有这五条原则的成功软件产品表示怀疑。有原则是件好事，但是也要时刻从实用的角度来 考量，不要把这里的每句话当作放之四海皆准的教条。 单一职责原则 单一职责原则（Single Responsibility Principle）：修改一个类的原因只能有一个。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:published_time","content":"2022-12-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/design-patterns/"}]]},"headers":[{"level":2,"title":"SOLID原则","slug":"solid原则-1","link":"#solid原则-1","children":[{"level":3,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":3,"title":"开闭原则","slug":"开闭原则","link":"#开闭原则","children":[]},{"level":3,"title":"里氏替换原则","slug":"里氏替换原则","link":"#里氏替换原则","children":[]},{"level":3,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[]},{"level":3,"title":"依赖倒置原则","slug":"依赖倒置原则","link":"#依赖倒置原则","children":[]}]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":5.06,"words":1518},"filePathRelative":"zh/basics/design-patterns/README.md","localizedDate":"2022年12月9日","excerpt":"<h1> SOLID原则</h1>\\n<h2> SOLID原则</h2>\\n<p>这五条原则是在罗伯特·马丁的著 作《敏捷软件开发：原则、模式与实践》中首次提出的。</p>\\n<p>SOLID 是让软件设计更易于理解、更加灵活和更易于维护的 五个原则的简称。与生活中所有事情一样，盲目遵守这些原则可能会弊大于利。在程序架构中应用这些原则可能会使其变得过于复杂。我对于是否真的有能够同时应用所有这五条原则的成功软件产品表示怀疑。有原则是件好事，但是也要时刻从实用的角度来 考量，不要把这里的每句话当作放之四海皆准的教条。</p>\\n<h3> 单一职责原则</h3>\\n<p>单一职责原则（Single Responsibility Principle）：修改一个类的原因只能有一个。</p>","autoDesc":true}');export{e as data};
