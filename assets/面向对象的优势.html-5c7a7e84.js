const e=JSON.parse('{"key":"v-4a45953a","path":"/zh/basics/OOP/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8A%BF.html","title":"面向对象VS面向过程","lang":"zh-CN","frontmatter":{"category":["面向对象"],"description":"面向对象VS面向过程 在上两节课中，我们讲了面向对象这种现在非常流行的编程范式，或者说编程风格。实际上，除了面向对象之外，被大家熟知的编程范式还有另外两种，面向过程编程和函数式编程。面向过程这种编程范式随着面向对象的出现，已经慢慢退出了舞台，而函数式编程目前还没有被广泛接受。 在专栏中，我不会对函数式编程做讲解，但我会花两节课的时间，讲一下面向过程这种编程范式。你可能会问，既然面向对象已经成为主流的编程范式，而面向过程已经不那么推荐使用，那为什么又要浪费时间讲它呢？ 那是因为在过往的工作中，我发现很多人搞不清楚面向对象和面向过程的区别，总以为使用面向对象编程语言来做开发，就是在进行面向对象编程了。而实际上，他们只是在用面向对象编程语言，编写面向过程风格的代码而已，并没有发挥面向对象编程的优势。这就相当于手握一把屠龙刀，却只是把它当作一把普通的刀剑来用，相当可惜。","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/basics/OOP/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8A%BF.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"面向对象VS面向过程"}],["meta",{"property":"og:description","content":"面向对象VS面向过程 在上两节课中，我们讲了面向对象这种现在非常流行的编程范式，或者说编程风格。实际上，除了面向对象之外，被大家熟知的编程范式还有另外两种，面向过程编程和函数式编程。面向过程这种编程范式随着面向对象的出现，已经慢慢退出了舞台，而函数式编程目前还没有被广泛接受。 在专栏中，我不会对函数式编程做讲解，但我会花两节课的时间，讲一下面向过程这种编程范式。你可能会问，既然面向对象已经成为主流的编程范式，而面向过程已经不那么推荐使用，那为什么又要浪费时间讲它呢？ 那是因为在过往的工作中，我发现很多人搞不清楚面向对象和面向过程的区别，总以为使用面向对象编程语言来做开发，就是在进行面向对象编程了。而实际上，他们只是在用面向对象编程语言，编写面向过程风格的代码而已，并没有发挥面向对象编程的优势。这就相当于手握一把屠龙刀，却只是把它当作一把普通的刀剑来用，相当可惜。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/basics/OOP/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BC%98%E5%8A%BF.html"}]]},"headers":[{"level":2,"title":"什么是面向过程编程与面向过程编程语言？","slug":"什么是面向过程编程与面向过程编程语言","link":"#什么是面向过程编程与面向过程编程语言","children":[]},{"level":2,"title":"面向对象编程相比面向过程编程有哪些优势？","slug":"面向对象编程相比面向过程编程有哪些优势","link":"#面向对象编程相比面向过程编程有哪些优势","children":[{"level":3,"title":"1.OOP 更加能够应对大规模复杂程序的开发","slug":"_1-oop-更加能够应对大规模复杂程序的开发","link":"#_1-oop-更加能够应对大规模复杂程序的开发","children":[]},{"level":3,"title":"2. OOP 风格的代码更易复用、易扩展、易维护","slug":"_2-oop-风格的代码更易复用、易扩展、易维护","link":"#_2-oop-风格的代码更易复用、易扩展、易维护","children":[]},{"level":3,"title":"3. OOP 语言更加人性化、更加高级、更加智能","slug":"_3-oop-语言更加人性化、更加高级、更加智能","link":"#_3-oop-语言更加人性化、更加高级、更加智能","children":[]}]},{"level":2,"title":"哪些代码设计看似是面向对象，实际是面向过程的？","slug":"哪些代码设计看似是面向对象-实际是面向过程的","link":"#哪些代码设计看似是面向对象-实际是面向过程的","children":[{"level":3,"title":"1. 滥用 getter、setter 方法","slug":"_1-滥用-getter、setter-方法","link":"#_1-滥用-getter、setter-方法","children":[]},{"level":3,"title":"2. 滥用全局变量和全局方法","slug":"_2-滥用全局变量和全局方法","link":"#_2-滥用全局变量和全局方法","children":[]},{"level":3,"title":"3. 定义数据和方法分离的类","slug":"_3-定义数据和方法分离的类","link":"#_3-定义数据和方法分离的类","children":[]}]},{"level":2,"title":"在面向对象编程中，为什么容易写出面向过程风格的代码？","slug":"在面向对象编程中-为什么容易写出面向过程风格的代码","link":"#在面向对象编程中-为什么容易写出面向过程风格的代码","children":[]},{"level":2,"title":"面向过程编程及面向过程编程语言就真的无用武之地了吗？","slug":"面向过程编程及面向过程编程语言就真的无用武之地了吗","link":"#面向过程编程及面向过程编程语言就真的无用武之地了吗","children":[]},{"level":2,"title":"重点回顾","slug":"重点回顾","link":"#重点回顾","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":36.92,"words":11077},"filePathRelative":"zh/basics/OOP/面向对象的优势.md","localizedDate":"2022年12月9日","excerpt":"<h1> 面向对象VS面向过程</h1>\\n<p>在上两节课中，我们讲了面向对象这种现在非常流行的编程范式，或者说编程风格。实际上，除了面向对象之外，被大家熟知的编程范式还有另外两种，面向过程编程和函数式编程。面向过程这种编程范式随着面向对象的出现，已经慢慢退出了舞台，而函数式编程目前还没有被广泛接受。</p>\\n<p>在专栏中，我不会对函数式编程做讲解，但我会花两节课的时间，讲一下面向过程这种编程范式。你可能会问，既然面向对象已经成为主流的编程范式，而面向过程已经不那么推荐使用，那为什么又要浪费时间讲它呢？</p>\\n<p>那是因为在过往的工作中，我发现很多人搞不清楚面向对象和面向过程的区别，总以为使用面向对象编程语言来做开发，就是在进行面向对象编程了。而实际上，他们只是在用面向对象编程语言，编写面向过程风格的代码而已，并没有发挥面向对象编程的优势。这就相当于手握一把屠龙刀，却只是把它当作一把普通的刀剑来用，相当可惜。</p>","autoDesc":true}');export{e as data};
