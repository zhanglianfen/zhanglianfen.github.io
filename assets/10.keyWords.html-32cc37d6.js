const n=JSON.parse('{"key":"v-55bd1894","path":"/zh/language/Java/basics/grammar/10.keyWords.html","title":"关键字","lang":"zh-CN","frontmatter":{"category":["Java基础"],"headerDepth":4,"description":"关键字 静态内部类实现的单例如何做到线程安全且可延迟加载? Java中的关键字有50多个，比如private、public、protected、class、interface、switch等等，大部分用法都比较简单，所以，我们不做讲解。本节，我们重点讲解final和static这两个关键词。这两个关键字既在开发中经常使用，也在面试中经常被考察。它们看似非常简单，但彻底搞懂却不容易，不信？我们来看下面这段代码。 public class Singleton { private Singleton() {} private static class SingletonHolder { public static final Singleton instance = new Singleton(); } public static Singleton getInstance() { return SingletonHolder.instance; } }","head":[["meta",{"property":"og:url","content":"https://theme-zhang.netlify.app/zh/language/Java/basics/grammar/10.keyWords.html"}],["meta",{"property":"og:site_name","content":"zhang"}],["meta",{"property":"og:title","content":"关键字"}],["meta",{"property":"og:description","content":"关键字 静态内部类实现的单例如何做到线程安全且可延迟加载? Java中的关键字有50多个，比如private、public、protected、class、interface、switch等等，大部分用法都比较简单，所以，我们不做讲解。本节，我们重点讲解final和static这两个关键词。这两个关键字既在开发中经常使用，也在面试中经常被考察。它们看似非常简单，但彻底搞懂却不容易，不信？我们来看下面这段代码。 public class Singleton { private Singleton() {} private static class SingletonHolder { public static final Singleton instance = new Singleton(); } public static Singleton getInstance() { return SingletonHolder.instance; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:04:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:04:07.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://theme-zhang.netlify.app/en/language/Java/basics/grammar/10.keyWords.html"}]]},"headers":[{"level":2,"title":"一、final关键字","slug":"一、final关键字","link":"#一、final关键字","children":[]},{"level":2,"title":"二、static关键字","slug":"二、static关键字","link":"#二、static关键字","children":[{"level":3,"title":"1）static变量","slug":"_1-static变量","link":"#_1-static变量","children":[]},{"level":3,"title":"2）static方法","slug":"_2-static方法","link":"#_2-static方法","children":[]},{"level":3,"title":"3）static代码块","slug":"_3-static代码块","link":"#_3-static代码块","children":[]},{"level":3,"title":"4）static嵌套类","slug":"_4-static嵌套类","link":"#_4-static嵌套类","children":[]}]},{"level":2,"title":"三、总结","slug":"三、总结","link":"#三、总结","children":[]},{"level":2,"title":"四、课后思考题","slug":"四、课后思考题","link":"#四、课后思考题","children":[]}],"git":{"createdTime":1670565847000,"updatedTime":1670565847000,"contributors":[{"name":"zhanglf","email":"454486214@qq.com","commits":1}]},"readingTime":{"minutes":13.98,"words":4193},"filePathRelative":"zh/language/Java/basics/grammar/10.keyWords.md","localizedDate":"2022年12月9日","excerpt":"<h1> 关键字</h1>\\n<blockquote>\\n<p><strong>静态内部类实现的单例如何做到线程安全且可延迟加载?</strong></p>\\n</blockquote>\\n<p>Java中的关键字有50多个，比如private、public、protected、class、interface、switch等等，大部分用法都比较简单，所以，我们不做讲解。本节，我们重点讲解final和static这两个关键词。这两个关键字既在开发中经常使用，也在面试中经常被考察。它们看似非常简单，但彻底搞懂却不容易，不信？我们来看下面这段代码。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Singleton</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Singleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n  \\n  <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">SingletonHolder</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Singleton</span> instance <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Singleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Singleton</span> <span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">SingletonHolder</span><span class=\\"token punctuation\\">.</span>instance<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
